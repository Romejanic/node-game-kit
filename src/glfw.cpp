/*
 * ====================== WARNING ========================
 * This file is autogenerated. It should NOT be edited unless
 * there are errors to fix or something has gone wrong.
 * 
 * Instead, you should run:
 *  npm run gen-src
 * 
 * to automatically regenerate this file based on the associated
 * header file.
 */

#include <native-helper.h>
#include <GLFW/glfw3.h>

NATIVE_FUNCTION(Init) {
	v8::Isolate* isolate = args.GetIsolate();
	int ret = glfwInit();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(Terminate) {
	glfwTerminate();
}
NATIVE_FUNCTION(InitHint) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("InitHint takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("hint is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("value is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwInitHint(arg0, arg1);
}
NATIVE_FUNCTION(GetVersion) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetVersion takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetVersion(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetVersionString) {
	v8::Isolate* isolate = args.GetIsolate();
	const char* ret = glfwGetVersionString();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetError) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetError takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	int ret = glfwGetError(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetErrorCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("SetErrorCallback takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	GLFWerrorfun ret = glfwSetErrorCallback(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetMonitors) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetMonitors takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	GLFWmonitor** ret = glfwGetMonitors(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetPrimaryMonitor) {
	v8::Isolate* isolate = args.GetIsolate();
	GLFWmonitor* ret = glfwGetPrimaryMonitor();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetMonitorPos) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetMonitorPos takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetMonitorPos(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetMonitorWorkarea) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 5) { THROW_ERROR("GetMonitorWorkarea takes 5 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	//!UNKNOWN TYPE for arg3!//
	//!UNKNOWN TYPE for arg4!//
	glfwGetMonitorWorkarea(arg0, arg1, arg2, arg3, arg4);
}
NATIVE_FUNCTION(GetMonitorPhysicalSize) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetMonitorPhysicalSize takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetMonitorPhysicalSize(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetMonitorContentScale) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetMonitorContentScale takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetMonitorContentScale(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetMonitorName) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetMonitorName takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	const char* ret = glfwGetMonitorName(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetMonitorUserPointer) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetMonitorUserPointer takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	glfwSetMonitorUserPointer(arg0, arg1);
}
NATIVE_FUNCTION(GetMonitorUserPointer) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetMonitorUserPointer takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	void* ret = glfwGetMonitorUserPointer(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetMonitorCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("SetMonitorCallback takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	GLFWmonitorfun ret = glfwSetMonitorCallback(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetVideoModes) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetVideoModes takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	const GLFWvidmode* ret = glfwGetVideoModes(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetVideoMode) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetVideoMode takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	const GLFWvidmode* ret = glfwGetVideoMode(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetGamma) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetGamma takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("gamma is of type number!"); }
	float arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetGamma(arg0, arg1);
}
NATIVE_FUNCTION(GetGammaRamp) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetGammaRamp takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	const GLFWgammaramp* ret = glfwGetGammaRamp(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetGammaRamp) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetGammaRamp takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	glfwSetGammaRamp(arg0, arg1);
}
NATIVE_FUNCTION(DefaultWindowHints) {
	glfwDefaultWindowHints();
}
NATIVE_FUNCTION(WindowHint) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("WindowHint takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("hint is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("value is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwWindowHint(arg0, arg1);
}
NATIVE_FUNCTION(WindowHintString) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("WindowHintString takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("hint is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[1]->IsString()) { THROW_TYPE_ERROR("value is of type string!"); }
	const char* arg1 = (const char*)(*v8::String::Utf8Value(args[1]));
	glfwWindowHintString(arg0, arg1);
}
NATIVE_FUNCTION(CreateWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 5) { THROW_ERROR("CreateWindow takes 5 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("width is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("height is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsString()) { THROW_TYPE_ERROR("title is of type string!"); }
	const char* arg2 = (const char*)(*v8::String::Utf8Value(args[2]));
	//!UNKNOWN TYPE for arg3!//
	//!UNKNOWN TYPE for arg4!//
	GLFWwindow* ret = glfwCreateWindow(arg0, arg1, arg2, arg3, arg4);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(DestroyWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("DestroyWindow takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwDestroyWindow(arg0);
}
NATIVE_FUNCTION(WindowShouldClose) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("WindowShouldClose takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	int ret = glfwWindowShouldClose(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowShouldClose) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowShouldClose takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("value is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowShouldClose(arg0, arg1);
}
NATIVE_FUNCTION(SetWindowTitle) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowTitle takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsString()) { THROW_TYPE_ERROR("title is of type string!"); }
	const char* arg1 = (const char*)(*v8::String::Utf8Value(args[1]));
	glfwSetWindowTitle(arg0, arg1);
}
NATIVE_FUNCTION(SetWindowIcon) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("SetWindowIcon takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("count is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	//!UNKNOWN TYPE for arg2!//
	glfwSetWindowIcon(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetWindowPos) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetWindowPos takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetWindowPos(arg0, arg1, arg2);
}
NATIVE_FUNCTION(SetWindowPos) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("SetWindowPos takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("xpos is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("ypos is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowPos(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetWindowSize) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetWindowSize takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetWindowSize(arg0, arg1, arg2);
}
NATIVE_FUNCTION(SetWindowSizeLimits) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 5) { THROW_ERROR("SetWindowSizeLimits takes 5 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("minwidth is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("minheight is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[3]->IsNumber()) { THROW_TYPE_ERROR("maxwidth is of type number!"); }
	int arg3 = args[3]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[4]->IsNumber()) { THROW_TYPE_ERROR("maxheight is of type number!"); }
	int arg4 = args[4]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowSizeLimits(arg0, arg1, arg2, arg3, arg4);
}
NATIVE_FUNCTION(SetWindowAspectRatio) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("SetWindowAspectRatio takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("numer is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("denom is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowAspectRatio(arg0, arg1, arg2);
}
NATIVE_FUNCTION(SetWindowSize) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("SetWindowSize takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("width is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("height is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowSize(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetFramebufferSize) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetFramebufferSize takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetFramebufferSize(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetWindowFrameSize) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 5) { THROW_ERROR("GetWindowFrameSize takes 5 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	//!UNKNOWN TYPE for arg3!//
	//!UNKNOWN TYPE for arg4!//
	glfwGetWindowFrameSize(arg0, arg1, arg2, arg3, arg4);
}
NATIVE_FUNCTION(GetWindowContentScale) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetWindowContentScale takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetWindowContentScale(arg0, arg1, arg2);
}
NATIVE_FUNCTION(GetWindowOpacity) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetWindowOpacity takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	float ret = glfwGetWindowOpacity(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowOpacity) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowOpacity takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("opacity is of type number!"); }
	float arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowOpacity(arg0, arg1);
}
NATIVE_FUNCTION(IconifyWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("IconifyWindow takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwIconifyWindow(arg0);
}
NATIVE_FUNCTION(RestoreWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("RestoreWindow takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwRestoreWindow(arg0);
}
NATIVE_FUNCTION(MaximizeWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("MaximizeWindow takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwMaximizeWindow(arg0);
}
NATIVE_FUNCTION(ShowWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("ShowWindow takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwShowWindow(arg0);
}
NATIVE_FUNCTION(HideWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("HideWindow takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwHideWindow(arg0);
}
NATIVE_FUNCTION(FocusWindow) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("FocusWindow takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwFocusWindow(arg0);
}
NATIVE_FUNCTION(RequestWindowAttention) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("RequestWindowAttention takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwRequestWindowAttention(arg0);
}
NATIVE_FUNCTION(GetWindowMonitor) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetWindowMonitor takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	GLFWmonitor* ret = glfwGetWindowMonitor(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowMonitor) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 7) { THROW_ERROR("SetWindowMonitor takes 7 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("xpos is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[3]->IsNumber()) { THROW_TYPE_ERROR("ypos is of type number!"); }
	int arg3 = args[3]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[4]->IsNumber()) { THROW_TYPE_ERROR("width is of type number!"); }
	int arg4 = args[4]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[5]->IsNumber()) { THROW_TYPE_ERROR("height is of type number!"); }
	int arg5 = args[5]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[6]->IsNumber()) { THROW_TYPE_ERROR("refreshRate is of type number!"); }
	int arg6 = args[6]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowMonitor(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}
NATIVE_FUNCTION(GetWindowAttrib) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetWindowAttrib takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("attrib is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	int ret = glfwGetWindowAttrib(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowAttrib) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("SetWindowAttrib takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("attrib is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("value is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetWindowAttrib(arg0, arg1, arg2);
}
NATIVE_FUNCTION(SetWindowUserPointer) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowUserPointer takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	glfwSetWindowUserPointer(arg0, arg1);
}
NATIVE_FUNCTION(GetWindowUserPointer) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetWindowUserPointer takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	void* ret = glfwGetWindowUserPointer(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowPosCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowPosCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowposfun ret = glfwSetWindowPosCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowSizeCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowSizeCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowsizefun ret = glfwSetWindowSizeCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowCloseCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowCloseCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowclosefun ret = glfwSetWindowCloseCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowRefreshCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowRefreshCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowrefreshfun ret = glfwSetWindowRefreshCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowFocusCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowFocusCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowfocusfun ret = glfwSetWindowFocusCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowIconifyCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowIconifyCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowiconifyfun ret = glfwSetWindowIconifyCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowMaximizeCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowMaximizeCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowmaximizefun ret = glfwSetWindowMaximizeCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetFramebufferSizeCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetFramebufferSizeCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWframebuffersizefun ret = glfwSetFramebufferSizeCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetWindowContentScaleCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetWindowContentScaleCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWwindowcontentscalefun ret = glfwSetWindowContentScaleCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(PollEvents) {
	glfwPollEvents();
}
NATIVE_FUNCTION(WaitEvents) {
	glfwWaitEvents();
}
NATIVE_FUNCTION(WaitEventsTimeout) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("WaitEventsTimeout takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("timeout is of type number!"); }
	double arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwWaitEventsTimeout(arg0);
}
NATIVE_FUNCTION(PostEmptyEvent) {
	glfwPostEmptyEvent();
}
NATIVE_FUNCTION(GetInputMode) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetInputMode takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("mode is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	int ret = glfwGetInputMode(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetInputMode) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("SetInputMode takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("mode is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("value is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetInputMode(arg0, arg1, arg2);
}
NATIVE_FUNCTION(RawMouseMotionSupported) {
	v8::Isolate* isolate = args.GetIsolate();
	int ret = glfwRawMouseMotionSupported();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetKeyName) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetKeyName takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("key is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("scancode is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	const char* ret = glfwGetKeyName(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetKeyScancode) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetKeyScancode takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("key is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	int ret = glfwGetKeyScancode(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetKey) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetKey takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("key is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	int ret = glfwGetKey(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetMouseButton) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetMouseButton takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("button is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	int ret = glfwGetMouseButton(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetCursorPos) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetCursorPos takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	glfwGetCursorPos(arg0, arg1, arg2);
}
NATIVE_FUNCTION(SetCursorPos) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("SetCursorPos takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("xpos is of type number!"); }
	double arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("ypos is of type number!"); }
	double arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetCursorPos(arg0, arg1, arg2);
}
NATIVE_FUNCTION(CreateCursor) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("CreateCursor takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsNumber()) { THROW_TYPE_ERROR("xhot is of type number!"); }
	int arg1 = args[1]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	if(!args[2]->IsNumber()) { THROW_TYPE_ERROR("yhot is of type number!"); }
	int arg2 = args[2]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	GLFWcursor* ret = glfwCreateCursor(arg0, arg1, arg2);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(CreateStandardCursor) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("CreateStandardCursor takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("shape is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	GLFWcursor* ret = glfwCreateStandardCursor(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(DestroyCursor) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("DestroyCursor takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwDestroyCursor(arg0);
}
NATIVE_FUNCTION(SetCursor) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetCursor takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	glfwSetCursor(arg0, arg1);
}
NATIVE_FUNCTION(SetKeyCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetKeyCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWkeyfun ret = glfwSetKeyCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetCharCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetCharCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWcharfun ret = glfwSetCharCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetCharModsCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetCharModsCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWcharmodsfun ret = glfwSetCharModsCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetMouseButtonCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetMouseButtonCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWmousebuttonfun ret = glfwSetMouseButtonCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetCursorPosCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetCursorPosCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWcursorposfun ret = glfwSetCursorPosCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetCursorEnterCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetCursorEnterCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWcursorenterfun ret = glfwSetCursorEnterCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetScrollCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetScrollCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWscrollfun ret = glfwSetScrollCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetDropCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetDropCallback takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	GLFWdropfun ret = glfwSetDropCallback(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(JoystickPresent) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("JoystickPresent takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	int ret = glfwJoystickPresent(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetJoystickAxes) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetJoystickAxes takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	//!UNKNOWN TYPE for arg1!//
	const float* ret = glfwGetJoystickAxes(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetJoystickButtons) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetJoystickButtons takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	//!UNKNOWN TYPE for arg1!//
	const unsigned char* ret = glfwGetJoystickButtons(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetJoystickHats) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetJoystickHats takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	//!UNKNOWN TYPE for arg1!//
	const unsigned char* ret = glfwGetJoystickHats(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetJoystickName) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetJoystickName takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	const char* ret = glfwGetJoystickName(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetJoystickGUID) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetJoystickGUID takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	const char* ret = glfwGetJoystickGUID(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetJoystickUserPointer) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetJoystickUserPointer takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	//!UNKNOWN TYPE for arg1!//
	glfwSetJoystickUserPointer(arg0, arg1);
}
NATIVE_FUNCTION(GetJoystickUserPointer) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetJoystickUserPointer takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	void* ret = glfwGetJoystickUserPointer(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(JoystickIsGamepad) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("JoystickIsGamepad takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	int ret = glfwJoystickIsGamepad(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetJoystickCallback) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("SetJoystickCallback takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	GLFWjoystickfun ret = glfwSetJoystickCallback(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(UpdateGamepadMappings) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("UpdateGamepadMappings takes 1 arguments."); }
	if(!args[0]->IsString()) { THROW_TYPE_ERROR("string is of type string!"); }
	const char* arg0 = (const char*)(*v8::String::Utf8Value(args[0]));
	int ret = glfwUpdateGamepadMappings(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetGamepadName) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetGamepadName takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	const char* ret = glfwGetGamepadName(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetGamepadState) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetGamepadState takes 2 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("jid is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	//!UNKNOWN TYPE for arg1!//
	int ret = glfwGetGamepadState(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetClipboardString) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("SetClipboardString takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsString()) { THROW_TYPE_ERROR("string is of type string!"); }
	const char* arg1 = (const char*)(*v8::String::Utf8Value(args[1]));
	glfwSetClipboardString(arg0, arg1);
}
NATIVE_FUNCTION(GetClipboardString) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetClipboardString takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	const char* ret = glfwGetClipboardString(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetTime) {
	v8::Isolate* isolate = args.GetIsolate();
	double ret = glfwGetTime();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SetTime) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("SetTime takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("time is of type number!"); }
	double arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSetTime(arg0);
}
NATIVE_FUNCTION(GetTimerValue) {
	v8::Isolate* isolate = args.GetIsolate();
	uint64_t ret = glfwGetTimerValue();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetTimerFrequency) {
	v8::Isolate* isolate = args.GetIsolate();
	uint64_t ret = glfwGetTimerFrequency();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(MakeContextCurrent) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("MakeContextCurrent takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwMakeContextCurrent(arg0);
}
NATIVE_FUNCTION(GetCurrentContext) {
	v8::Isolate* isolate = args.GetIsolate();
	GLFWwindow* ret = glfwGetCurrentContext();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(SwapBuffers) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("SwapBuffers takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	glfwSwapBuffers(arg0);
}
NATIVE_FUNCTION(SwapInterval) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("SwapInterval takes 1 arguments."); }
	if(!args[0]->IsNumber()) { THROW_TYPE_ERROR("interval is of type number!"); }
	int arg0 = args[0]->IntegerValue(isolate->GetCurrentContext()).FromMaybe(0);
	glfwSwapInterval(arg0);
}
NATIVE_FUNCTION(ExtensionSupported) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("ExtensionSupported takes 1 arguments."); }
	if(!args[0]->IsString()) { THROW_TYPE_ERROR("extension is of type string!"); }
	const char* arg0 = (const char*)(*v8::String::Utf8Value(args[0]));
	int ret = glfwExtensionSupported(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetProcAddress) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetProcAddress takes 1 arguments."); }
	if(!args[0]->IsString()) { THROW_TYPE_ERROR("procname is of type string!"); }
	const char* arg0 = (const char*)(*v8::String::Utf8Value(args[0]));
	GLFWglproc ret = glfwGetProcAddress(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(VulkanSupported) {
	v8::Isolate* isolate = args.GetIsolate();
	int ret = glfwVulkanSupported();
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetRequiredInstanceExtensions) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 1) { THROW_ERROR("GetRequiredInstanceExtensions takes 1 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	const char** ret = glfwGetRequiredInstanceExtensions(arg0);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetInstanceProcAddress) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 2) { THROW_ERROR("GetInstanceProcAddress takes 2 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	if(!args[1]->IsString()) { THROW_TYPE_ERROR("procname is of type string!"); }
	const char* arg1 = (const char*)(*v8::String::Utf8Value(args[1]));
	GLFWvkproc ret = glfwGetInstanceProcAddress(arg0, arg1);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(GetPhysicalDevicePresentationSupport) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 3) { THROW_ERROR("GetPhysicalDevicePresentationSupport takes 3 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	int ret = glfwGetPhysicalDevicePresentationSupport(arg0, arg1, arg2);
	RETURN(TO_NUMBER(ret));
}
NATIVE_FUNCTION(CreateWindowSurface) {
	v8::Isolate* isolate = args.GetIsolate();
	if(args.Length() < 4) { THROW_ERROR("CreateWindowSurface takes 4 arguments."); }
	//!UNKNOWN TYPE for arg0!//
	//!UNKNOWN TYPE for arg1!//
	//!UNKNOWN TYPE for arg2!//
	//!UNKNOWN TYPE for arg3!//
	VkResult ret = glfwCreateWindowSurface(arg0, arg1, arg2, arg3);
	RETURN(TO_NUMBER(ret));
}


//==========================INIT==========================//

void ExportModule(v8::Local<v8::Object> exports) {
    v8::Isolate* isolate = exports->GetIsolate();
    // Consts
	EXPORT_CONST("VERSION_MAJOR", GLFW_VERSION_MAJOR);
	EXPORT_CONST("VERSION_MINOR", GLFW_VERSION_MINOR);
	EXPORT_CONST("VERSION_REVISION", GLFW_VERSION_REVISION);
	EXPORT_CONST("TRUE", GLFW_TRUE);
	EXPORT_CONST("FALSE", GLFW_FALSE);
	EXPORT_CONST("RELEASE", GLFW_RELEASE);
	EXPORT_CONST("PRESS", GLFW_PRESS);
	EXPORT_CONST("REPEAT", GLFW_REPEAT);
	EXPORT_CONST("HAT_CENTERED", GLFW_HAT_CENTERED);
	EXPORT_CONST("HAT_UP", GLFW_HAT_UP);
	EXPORT_CONST("HAT_RIGHT", GLFW_HAT_RIGHT);
	EXPORT_CONST("HAT_DOWN", GLFW_HAT_DOWN);
	EXPORT_CONST("HAT_LEFT", GLFW_HAT_LEFT);
	EXPORT_CONST("HAT_RIGHT_UP", GLFW_HAT_RIGHT_UP);
	EXPORT_CONST("HAT_RIGHT_DOWN", GLFW_HAT_RIGHT_DOWN);
	EXPORT_CONST("HAT_LEFT_UP", GLFW_HAT_LEFT_UP);
	EXPORT_CONST("HAT_LEFT_DOWN", GLFW_HAT_LEFT_DOWN);
	EXPORT_CONST("KEY_UNKNOWN", GLFW_KEY_UNKNOWN);
	EXPORT_CONST("KEY_SPACE", GLFW_KEY_SPACE);
	EXPORT_CONST("KEY_APOSTROPHE", GLFW_KEY_APOSTROPHE);
	EXPORT_CONST("KEY_COMMA", GLFW_KEY_COMMA);
	EXPORT_CONST("KEY_MINUS", GLFW_KEY_MINUS);
	EXPORT_CONST("KEY_PERIOD", GLFW_KEY_PERIOD);
	EXPORT_CONST("KEY_SLASH", GLFW_KEY_SLASH);
	EXPORT_CONST("KEY_0", GLFW_KEY_0);
	EXPORT_CONST("KEY_1", GLFW_KEY_1);
	EXPORT_CONST("KEY_2", GLFW_KEY_2);
	EXPORT_CONST("KEY_3", GLFW_KEY_3);
	EXPORT_CONST("KEY_4", GLFW_KEY_4);
	EXPORT_CONST("KEY_5", GLFW_KEY_5);
	EXPORT_CONST("KEY_6", GLFW_KEY_6);
	EXPORT_CONST("KEY_7", GLFW_KEY_7);
	EXPORT_CONST("KEY_8", GLFW_KEY_8);
	EXPORT_CONST("KEY_9", GLFW_KEY_9);
	EXPORT_CONST("KEY_SEMICOLON", GLFW_KEY_SEMICOLON);
	EXPORT_CONST("KEY_EQUAL", GLFW_KEY_EQUAL);
	EXPORT_CONST("KEY_A", GLFW_KEY_A);
	EXPORT_CONST("KEY_B", GLFW_KEY_B);
	EXPORT_CONST("KEY_C", GLFW_KEY_C);
	EXPORT_CONST("KEY_D", GLFW_KEY_D);
	EXPORT_CONST("KEY_E", GLFW_KEY_E);
	EXPORT_CONST("KEY_F", GLFW_KEY_F);
	EXPORT_CONST("KEY_G", GLFW_KEY_G);
	EXPORT_CONST("KEY_H", GLFW_KEY_H);
	EXPORT_CONST("KEY_I", GLFW_KEY_I);
	EXPORT_CONST("KEY_J", GLFW_KEY_J);
	EXPORT_CONST("KEY_K", GLFW_KEY_K);
	EXPORT_CONST("KEY_L", GLFW_KEY_L);
	EXPORT_CONST("KEY_M", GLFW_KEY_M);
	EXPORT_CONST("KEY_N", GLFW_KEY_N);
	EXPORT_CONST("KEY_O", GLFW_KEY_O);
	EXPORT_CONST("KEY_P", GLFW_KEY_P);
	EXPORT_CONST("KEY_Q", GLFW_KEY_Q);
	EXPORT_CONST("KEY_R", GLFW_KEY_R);
	EXPORT_CONST("KEY_S", GLFW_KEY_S);
	EXPORT_CONST("KEY_T", GLFW_KEY_T);
	EXPORT_CONST("KEY_U", GLFW_KEY_U);
	EXPORT_CONST("KEY_V", GLFW_KEY_V);
	EXPORT_CONST("KEY_W", GLFW_KEY_W);
	EXPORT_CONST("KEY_X", GLFW_KEY_X);
	EXPORT_CONST("KEY_Y", GLFW_KEY_Y);
	EXPORT_CONST("KEY_Z", GLFW_KEY_Z);
	EXPORT_CONST("KEY_LEFT_BRACKET", GLFW_KEY_LEFT_BRACKET);
	EXPORT_CONST("KEY_BACKSLASH", GLFW_KEY_BACKSLASH);
	EXPORT_CONST("KEY_RIGHT_BRACKET", GLFW_KEY_RIGHT_BRACKET);
	EXPORT_CONST("KEY_GRAVE_ACCENT", GLFW_KEY_GRAVE_ACCENT);
	EXPORT_CONST("KEY_WORLD_1", GLFW_KEY_WORLD_1);
	EXPORT_CONST("KEY_WORLD_2", GLFW_KEY_WORLD_2);
	EXPORT_CONST("KEY_ESCAPE", GLFW_KEY_ESCAPE);
	EXPORT_CONST("KEY_ENTER", GLFW_KEY_ENTER);
	EXPORT_CONST("KEY_TAB", GLFW_KEY_TAB);
	EXPORT_CONST("KEY_BACKSPACE", GLFW_KEY_BACKSPACE);
	EXPORT_CONST("KEY_INSERT", GLFW_KEY_INSERT);
	EXPORT_CONST("KEY_DELETE", GLFW_KEY_DELETE);
	EXPORT_CONST("KEY_RIGHT", GLFW_KEY_RIGHT);
	EXPORT_CONST("KEY_LEFT", GLFW_KEY_LEFT);
	EXPORT_CONST("KEY_DOWN", GLFW_KEY_DOWN);
	EXPORT_CONST("KEY_UP", GLFW_KEY_UP);
	EXPORT_CONST("KEY_PAGE_UP", GLFW_KEY_PAGE_UP);
	EXPORT_CONST("KEY_PAGE_DOWN", GLFW_KEY_PAGE_DOWN);
	EXPORT_CONST("KEY_HOME", GLFW_KEY_HOME);
	EXPORT_CONST("KEY_END", GLFW_KEY_END);
	EXPORT_CONST("KEY_CAPS_LOCK", GLFW_KEY_CAPS_LOCK);
	EXPORT_CONST("KEY_SCROLL_LOCK", GLFW_KEY_SCROLL_LOCK);
	EXPORT_CONST("KEY_NUM_LOCK", GLFW_KEY_NUM_LOCK);
	EXPORT_CONST("KEY_PRINT_SCREEN", GLFW_KEY_PRINT_SCREEN);
	EXPORT_CONST("KEY_PAUSE", GLFW_KEY_PAUSE);
	EXPORT_CONST("KEY_F1", GLFW_KEY_F1);
	EXPORT_CONST("KEY_F2", GLFW_KEY_F2);
	EXPORT_CONST("KEY_F3", GLFW_KEY_F3);
	EXPORT_CONST("KEY_F4", GLFW_KEY_F4);
	EXPORT_CONST("KEY_F5", GLFW_KEY_F5);
	EXPORT_CONST("KEY_F6", GLFW_KEY_F6);
	EXPORT_CONST("KEY_F7", GLFW_KEY_F7);
	EXPORT_CONST("KEY_F8", GLFW_KEY_F8);
	EXPORT_CONST("KEY_F9", GLFW_KEY_F9);
	EXPORT_CONST("KEY_F10", GLFW_KEY_F10);
	EXPORT_CONST("KEY_F11", GLFW_KEY_F11);
	EXPORT_CONST("KEY_F12", GLFW_KEY_F12);
	EXPORT_CONST("KEY_F13", GLFW_KEY_F13);
	EXPORT_CONST("KEY_F14", GLFW_KEY_F14);
	EXPORT_CONST("KEY_F15", GLFW_KEY_F15);
	EXPORT_CONST("KEY_F16", GLFW_KEY_F16);
	EXPORT_CONST("KEY_F17", GLFW_KEY_F17);
	EXPORT_CONST("KEY_F18", GLFW_KEY_F18);
	EXPORT_CONST("KEY_F19", GLFW_KEY_F19);
	EXPORT_CONST("KEY_F20", GLFW_KEY_F20);
	EXPORT_CONST("KEY_F21", GLFW_KEY_F21);
	EXPORT_CONST("KEY_F22", GLFW_KEY_F22);
	EXPORT_CONST("KEY_F23", GLFW_KEY_F23);
	EXPORT_CONST("KEY_F24", GLFW_KEY_F24);
	EXPORT_CONST("KEY_F25", GLFW_KEY_F25);
	EXPORT_CONST("KEY_KP_0", GLFW_KEY_KP_0);
	EXPORT_CONST("KEY_KP_1", GLFW_KEY_KP_1);
	EXPORT_CONST("KEY_KP_2", GLFW_KEY_KP_2);
	EXPORT_CONST("KEY_KP_3", GLFW_KEY_KP_3);
	EXPORT_CONST("KEY_KP_4", GLFW_KEY_KP_4);
	EXPORT_CONST("KEY_KP_5", GLFW_KEY_KP_5);
	EXPORT_CONST("KEY_KP_6", GLFW_KEY_KP_6);
	EXPORT_CONST("KEY_KP_7", GLFW_KEY_KP_7);
	EXPORT_CONST("KEY_KP_8", GLFW_KEY_KP_8);
	EXPORT_CONST("KEY_KP_9", GLFW_KEY_KP_9);
	EXPORT_CONST("KEY_KP_DECIMAL", GLFW_KEY_KP_DECIMAL);
	EXPORT_CONST("KEY_KP_DIVIDE", GLFW_KEY_KP_DIVIDE);
	EXPORT_CONST("KEY_KP_MULTIPLY", GLFW_KEY_KP_MULTIPLY);
	EXPORT_CONST("KEY_KP_SUBTRACT", GLFW_KEY_KP_SUBTRACT);
	EXPORT_CONST("KEY_KP_ADD", GLFW_KEY_KP_ADD);
	EXPORT_CONST("KEY_KP_ENTER", GLFW_KEY_KP_ENTER);
	EXPORT_CONST("KEY_KP_EQUAL", GLFW_KEY_KP_EQUAL);
	EXPORT_CONST("KEY_LEFT_SHIFT", GLFW_KEY_LEFT_SHIFT);
	EXPORT_CONST("KEY_LEFT_CONTROL", GLFW_KEY_LEFT_CONTROL);
	EXPORT_CONST("KEY_LEFT_ALT", GLFW_KEY_LEFT_ALT);
	EXPORT_CONST("KEY_LEFT_SUPER", GLFW_KEY_LEFT_SUPER);
	EXPORT_CONST("KEY_RIGHT_SHIFT", GLFW_KEY_RIGHT_SHIFT);
	EXPORT_CONST("KEY_RIGHT_CONTROL", GLFW_KEY_RIGHT_CONTROL);
	EXPORT_CONST("KEY_RIGHT_ALT", GLFW_KEY_RIGHT_ALT);
	EXPORT_CONST("KEY_RIGHT_SUPER", GLFW_KEY_RIGHT_SUPER);
	EXPORT_CONST("KEY_MENU", GLFW_KEY_MENU);
	EXPORT_CONST("KEY_LAST", GLFW_KEY_LAST);
	EXPORT_CONST("MOD_SHIFT", GLFW_MOD_SHIFT);
	EXPORT_CONST("MOD_CONTROL", GLFW_MOD_CONTROL);
	EXPORT_CONST("MOD_ALT", GLFW_MOD_ALT);
	EXPORT_CONST("MOD_SUPER", GLFW_MOD_SUPER);
	EXPORT_CONST("MOD_CAPS_LOCK", GLFW_MOD_CAPS_LOCK);
	EXPORT_CONST("MOD_NUM_LOCK", GLFW_MOD_NUM_LOCK);
	EXPORT_CONST("MOUSE_BUTTON_1", GLFW_MOUSE_BUTTON_1);
	EXPORT_CONST("MOUSE_BUTTON_2", GLFW_MOUSE_BUTTON_2);
	EXPORT_CONST("MOUSE_BUTTON_3", GLFW_MOUSE_BUTTON_3);
	EXPORT_CONST("MOUSE_BUTTON_4", GLFW_MOUSE_BUTTON_4);
	EXPORT_CONST("MOUSE_BUTTON_5", GLFW_MOUSE_BUTTON_5);
	EXPORT_CONST("MOUSE_BUTTON_6", GLFW_MOUSE_BUTTON_6);
	EXPORT_CONST("MOUSE_BUTTON_7", GLFW_MOUSE_BUTTON_7);
	EXPORT_CONST("MOUSE_BUTTON_8", GLFW_MOUSE_BUTTON_8);
	EXPORT_CONST("MOUSE_BUTTON_LAST", GLFW_MOUSE_BUTTON_LAST);
	EXPORT_CONST("MOUSE_BUTTON_LEFT", GLFW_MOUSE_BUTTON_LEFT);
	EXPORT_CONST("MOUSE_BUTTON_RIGHT", GLFW_MOUSE_BUTTON_RIGHT);
	EXPORT_CONST("MOUSE_BUTTON_MIDDLE", GLFW_MOUSE_BUTTON_MIDDLE);
	EXPORT_CONST("JOYSTICK_1", GLFW_JOYSTICK_1);
	EXPORT_CONST("JOYSTICK_2", GLFW_JOYSTICK_2);
	EXPORT_CONST("JOYSTICK_3", GLFW_JOYSTICK_3);
	EXPORT_CONST("JOYSTICK_4", GLFW_JOYSTICK_4);
	EXPORT_CONST("JOYSTICK_5", GLFW_JOYSTICK_5);
	EXPORT_CONST("JOYSTICK_6", GLFW_JOYSTICK_6);
	EXPORT_CONST("JOYSTICK_7", GLFW_JOYSTICK_7);
	EXPORT_CONST("JOYSTICK_8", GLFW_JOYSTICK_8);
	EXPORT_CONST("JOYSTICK_9", GLFW_JOYSTICK_9);
	EXPORT_CONST("JOYSTICK_10", GLFW_JOYSTICK_10);
	EXPORT_CONST("JOYSTICK_11", GLFW_JOYSTICK_11);
	EXPORT_CONST("JOYSTICK_12", GLFW_JOYSTICK_12);
	EXPORT_CONST("JOYSTICK_13", GLFW_JOYSTICK_13);
	EXPORT_CONST("JOYSTICK_14", GLFW_JOYSTICK_14);
	EXPORT_CONST("JOYSTICK_15", GLFW_JOYSTICK_15);
	EXPORT_CONST("JOYSTICK_16", GLFW_JOYSTICK_16);
	EXPORT_CONST("JOYSTICK_LAST", GLFW_JOYSTICK_LAST);
	EXPORT_CONST("GAMEPAD_BUTTON_A", GLFW_GAMEPAD_BUTTON_A);
	EXPORT_CONST("GAMEPAD_BUTTON_B", GLFW_GAMEPAD_BUTTON_B);
	EXPORT_CONST("GAMEPAD_BUTTON_X", GLFW_GAMEPAD_BUTTON_X);
	EXPORT_CONST("GAMEPAD_BUTTON_Y", GLFW_GAMEPAD_BUTTON_Y);
	EXPORT_CONST("GAMEPAD_BUTTON_LEFT_BUMPER", GLFW_GAMEPAD_BUTTON_LEFT_BUMPER);
	EXPORT_CONST("GAMEPAD_BUTTON_RIGHT_BUMPER", GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER);
	EXPORT_CONST("GAMEPAD_BUTTON_BACK", GLFW_GAMEPAD_BUTTON_BACK);
	EXPORT_CONST("GAMEPAD_BUTTON_START", GLFW_GAMEPAD_BUTTON_START);
	EXPORT_CONST("GAMEPAD_BUTTON_GUIDE", GLFW_GAMEPAD_BUTTON_GUIDE);
	EXPORT_CONST("GAMEPAD_BUTTON_LEFT_THUMB", GLFW_GAMEPAD_BUTTON_LEFT_THUMB);
	EXPORT_CONST("GAMEPAD_BUTTON_RIGHT_THUMB", GLFW_GAMEPAD_BUTTON_RIGHT_THUMB);
	EXPORT_CONST("GAMEPAD_BUTTON_DPAD_UP", GLFW_GAMEPAD_BUTTON_DPAD_UP);
	EXPORT_CONST("GAMEPAD_BUTTON_DPAD_RIGHT", GLFW_GAMEPAD_BUTTON_DPAD_RIGHT);
	EXPORT_CONST("GAMEPAD_BUTTON_DPAD_DOWN", GLFW_GAMEPAD_BUTTON_DPAD_DOWN);
	EXPORT_CONST("GAMEPAD_BUTTON_DPAD_LEFT", GLFW_GAMEPAD_BUTTON_DPAD_LEFT);
	EXPORT_CONST("GAMEPAD_BUTTON_LAST", GLFW_GAMEPAD_BUTTON_LAST);
	EXPORT_CONST("GAMEPAD_BUTTON_CROSS", GLFW_GAMEPAD_BUTTON_CROSS);
	EXPORT_CONST("GAMEPAD_BUTTON_CIRCLE", GLFW_GAMEPAD_BUTTON_CIRCLE);
	EXPORT_CONST("GAMEPAD_BUTTON_SQUARE", GLFW_GAMEPAD_BUTTON_SQUARE);
	EXPORT_CONST("GAMEPAD_BUTTON_TRIANGLE", GLFW_GAMEPAD_BUTTON_TRIANGLE);
	EXPORT_CONST("GAMEPAD_AXIS_LEFT_X", GLFW_GAMEPAD_AXIS_LEFT_X);
	EXPORT_CONST("GAMEPAD_AXIS_LEFT_Y", GLFW_GAMEPAD_AXIS_LEFT_Y);
	EXPORT_CONST("GAMEPAD_AXIS_RIGHT_X", GLFW_GAMEPAD_AXIS_RIGHT_X);
	EXPORT_CONST("GAMEPAD_AXIS_RIGHT_Y", GLFW_GAMEPAD_AXIS_RIGHT_Y);
	EXPORT_CONST("GAMEPAD_AXIS_LEFT_TRIGGER", GLFW_GAMEPAD_AXIS_LEFT_TRIGGER);
	EXPORT_CONST("GAMEPAD_AXIS_RIGHT_TRIGGER", GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER);
	EXPORT_CONST("GAMEPAD_AXIS_LAST", GLFW_GAMEPAD_AXIS_LAST);
	EXPORT_CONST("NO_ERROR", GLFW_NO_ERROR);
	EXPORT_CONST("NOT_INITIALIZED", GLFW_NOT_INITIALIZED);
	EXPORT_CONST("NO_CURRENT_CONTEXT", GLFW_NO_CURRENT_CONTEXT);
	EXPORT_CONST("INVALID_ENUM", GLFW_INVALID_ENUM);
	EXPORT_CONST("INVALID_VALUE", GLFW_INVALID_VALUE);
	EXPORT_CONST("OUT_OF_MEMORY", GLFW_OUT_OF_MEMORY);
	EXPORT_CONST("API_UNAVAILABLE", GLFW_API_UNAVAILABLE);
	EXPORT_CONST("VERSION_UNAVAILABLE", GLFW_VERSION_UNAVAILABLE);
	EXPORT_CONST("PLATFORM_ERROR", GLFW_PLATFORM_ERROR);
	EXPORT_CONST("FORMAT_UNAVAILABLE", GLFW_FORMAT_UNAVAILABLE);
	EXPORT_CONST("NO_WINDOW_CONTEXT", GLFW_NO_WINDOW_CONTEXT);
	EXPORT_CONST("FOCUSED", GLFW_FOCUSED);
	EXPORT_CONST("ICONIFIED", GLFW_ICONIFIED);
	EXPORT_CONST("RESIZABLE", GLFW_RESIZABLE);
	EXPORT_CONST("VISIBLE", GLFW_VISIBLE);
	EXPORT_CONST("DECORATED", GLFW_DECORATED);
	EXPORT_CONST("AUTO_ICONIFY", GLFW_AUTO_ICONIFY);
	EXPORT_CONST("FLOATING", GLFW_FLOATING);
	EXPORT_CONST("MAXIMIZED", GLFW_MAXIMIZED);
	EXPORT_CONST("CENTER_CURSOR", GLFW_CENTER_CURSOR);
	EXPORT_CONST("TRANSPARENT_FRAMEBUFFER", GLFW_TRANSPARENT_FRAMEBUFFER);
	EXPORT_CONST("HOVERED", GLFW_HOVERED);
	EXPORT_CONST("FOCUS_ON_SHOW", GLFW_FOCUS_ON_SHOW);
	EXPORT_CONST("RED_BITS", GLFW_RED_BITS);
	EXPORT_CONST("GREEN_BITS", GLFW_GREEN_BITS);
	EXPORT_CONST("BLUE_BITS", GLFW_BLUE_BITS);
	EXPORT_CONST("ALPHA_BITS", GLFW_ALPHA_BITS);
	EXPORT_CONST("DEPTH_BITS", GLFW_DEPTH_BITS);
	EXPORT_CONST("STENCIL_BITS", GLFW_STENCIL_BITS);
	EXPORT_CONST("ACCUM_RED_BITS", GLFW_ACCUM_RED_BITS);
	EXPORT_CONST("ACCUM_GREEN_BITS", GLFW_ACCUM_GREEN_BITS);
	EXPORT_CONST("ACCUM_BLUE_BITS", GLFW_ACCUM_BLUE_BITS);
	EXPORT_CONST("ACCUM_ALPHA_BITS", GLFW_ACCUM_ALPHA_BITS);
	EXPORT_CONST("AUX_BUFFERS", GLFW_AUX_BUFFERS);
	EXPORT_CONST("STEREO", GLFW_STEREO);
	EXPORT_CONST("SAMPLES", GLFW_SAMPLES);
	EXPORT_CONST("SRGB_CAPABLE", GLFW_SRGB_CAPABLE);
	EXPORT_CONST("REFRESH_RATE", GLFW_REFRESH_RATE);
	EXPORT_CONST("DOUBLEBUFFER", GLFW_DOUBLEBUFFER);
	EXPORT_CONST("CLIENT_API", GLFW_CLIENT_API);
	EXPORT_CONST("CONTEXT_VERSION_MAJOR", GLFW_CONTEXT_VERSION_MAJOR);
	EXPORT_CONST("CONTEXT_VERSION_MINOR", GLFW_CONTEXT_VERSION_MINOR);
	EXPORT_CONST("CONTEXT_REVISION", GLFW_CONTEXT_REVISION);
	EXPORT_CONST("CONTEXT_ROBUSTNESS", GLFW_CONTEXT_ROBUSTNESS);
	EXPORT_CONST("OPENGL_FORWARD_COMPAT", GLFW_OPENGL_FORWARD_COMPAT);
	EXPORT_CONST("OPENGL_DEBUG_CONTEXT", GLFW_OPENGL_DEBUG_CONTEXT);
	EXPORT_CONST("OPENGL_PROFILE", GLFW_OPENGL_PROFILE);
	EXPORT_CONST("CONTEXT_RELEASE_BEHAVIOR", GLFW_CONTEXT_RELEASE_BEHAVIOR);
	EXPORT_CONST("CONTEXT_NO_ERROR", GLFW_CONTEXT_NO_ERROR);
	EXPORT_CONST("CONTEXT_CREATION_API", GLFW_CONTEXT_CREATION_API);
	EXPORT_CONST("SCALE_TO_MONITOR", GLFW_SCALE_TO_MONITOR);
	EXPORT_CONST("COCOA_RETINA_FRAMEBUFFER", GLFW_COCOA_RETINA_FRAMEBUFFER);
	EXPORT_CONST("COCOA_FRAME_NAME", GLFW_COCOA_FRAME_NAME);
	EXPORT_CONST("COCOA_GRAPHICS_SWITCHING", GLFW_COCOA_GRAPHICS_SWITCHING);
	EXPORT_CONST("X11_CLASS_NAME", GLFW_X11_CLASS_NAME);
	EXPORT_CONST("X11_INSTANCE_NAME", GLFW_X11_INSTANCE_NAME);
	EXPORT_CONST("NO_API", GLFW_NO_API);
	EXPORT_CONST("OPENGL_API", GLFW_OPENGL_API);
	EXPORT_CONST("OPENGL_ES_API", GLFW_OPENGL_ES_API);
	EXPORT_CONST("NO_ROBUSTNESS", GLFW_NO_ROBUSTNESS);
	EXPORT_CONST("NO_RESET_NOTIFICATION", GLFW_NO_RESET_NOTIFICATION);
	EXPORT_CONST("LOSE_CONTEXT_ON_RESET", GLFW_LOSE_CONTEXT_ON_RESET);
	EXPORT_CONST("OPENGL_ANY_PROFILE", GLFW_OPENGL_ANY_PROFILE);
	EXPORT_CONST("OPENGL_CORE_PROFILE", GLFW_OPENGL_CORE_PROFILE);
	EXPORT_CONST("OPENGL_COMPAT_PROFILE", GLFW_OPENGL_COMPAT_PROFILE);
	EXPORT_CONST("CURSOR", GLFW_CURSOR);
	EXPORT_CONST("STICKY_KEYS", GLFW_STICKY_KEYS);
	EXPORT_CONST("STICKY_MOUSE_BUTTONS", GLFW_STICKY_MOUSE_BUTTONS);
	EXPORT_CONST("LOCK_KEY_MODS", GLFW_LOCK_KEY_MODS);
	EXPORT_CONST("RAW_MOUSE_MOTION", GLFW_RAW_MOUSE_MOTION);
	EXPORT_CONST("CURSOR_NORMAL", GLFW_CURSOR_NORMAL);
	EXPORT_CONST("CURSOR_HIDDEN", GLFW_CURSOR_HIDDEN);
	EXPORT_CONST("CURSOR_DISABLED", GLFW_CURSOR_DISABLED);
	EXPORT_CONST("ANY_RELEASE_BEHAVIOR", GLFW_ANY_RELEASE_BEHAVIOR);
	EXPORT_CONST("RELEASE_BEHAVIOR_FLUSH", GLFW_RELEASE_BEHAVIOR_FLUSH);
	EXPORT_CONST("RELEASE_BEHAVIOR_NONE", GLFW_RELEASE_BEHAVIOR_NONE);
	EXPORT_CONST("NATIVE_CONTEXT_API", GLFW_NATIVE_CONTEXT_API);
	EXPORT_CONST("EGL_CONTEXT_API", GLFW_EGL_CONTEXT_API);
	EXPORT_CONST("OSMESA_CONTEXT_API", GLFW_OSMESA_CONTEXT_API);
	EXPORT_CONST("ARROW_CURSOR", GLFW_ARROW_CURSOR);
	EXPORT_CONST("IBEAM_CURSOR", GLFW_IBEAM_CURSOR);
	EXPORT_CONST("CROSSHAIR_CURSOR", GLFW_CROSSHAIR_CURSOR);
	EXPORT_CONST("HAND_CURSOR", GLFW_HAND_CURSOR);
	EXPORT_CONST("HRESIZE_CURSOR", GLFW_HRESIZE_CURSOR);
	EXPORT_CONST("VRESIZE_CURSOR", GLFW_VRESIZE_CURSOR);
	EXPORT_CONST("CONNECTED", GLFW_CONNECTED);
	EXPORT_CONST("DISCONNECTED", GLFW_DISCONNECTED);
	EXPORT_CONST("JOYSTICK_HAT_BUTTONS", GLFW_JOYSTICK_HAT_BUTTONS);
	EXPORT_CONST("COCOA_CHDIR_RESOURCES", GLFW_COCOA_CHDIR_RESOURCES);
	EXPORT_CONST("COCOA_MENUBAR", GLFW_COCOA_MENUBAR);
	EXPORT_CONST("DONT_CARE", GLFW_DONT_CARE);

    // Methods
	NODE_SET_METHOD(exports, "init", Init);
	NODE_SET_METHOD(exports, "terminate", Terminate);
	NODE_SET_METHOD(exports, "initHint", InitHint);
	NODE_SET_METHOD(exports, "getVersion", GetVersion);
	NODE_SET_METHOD(exports, "getVersionString", GetVersionString);
	NODE_SET_METHOD(exports, "getError", GetError);
	NODE_SET_METHOD(exports, "setErrorCallback", SetErrorCallback);
	NODE_SET_METHOD(exports, "getMonitors", GetMonitors);
	NODE_SET_METHOD(exports, "getPrimaryMonitor", GetPrimaryMonitor);
	NODE_SET_METHOD(exports, "getMonitorPos", GetMonitorPos);
	NODE_SET_METHOD(exports, "getMonitorWorkarea", GetMonitorWorkarea);
	NODE_SET_METHOD(exports, "getMonitorPhysicalSize", GetMonitorPhysicalSize);
	NODE_SET_METHOD(exports, "getMonitorContentScale", GetMonitorContentScale);
	NODE_SET_METHOD(exports, "getMonitorName", GetMonitorName);
	NODE_SET_METHOD(exports, "setMonitorUserPointer", SetMonitorUserPointer);
	NODE_SET_METHOD(exports, "getMonitorUserPointer", GetMonitorUserPointer);
	NODE_SET_METHOD(exports, "setMonitorCallback", SetMonitorCallback);
	NODE_SET_METHOD(exports, "getVideoModes", GetVideoModes);
	NODE_SET_METHOD(exports, "getVideoMode", GetVideoMode);
	NODE_SET_METHOD(exports, "setGamma", SetGamma);
	NODE_SET_METHOD(exports, "getGammaRamp", GetGammaRamp);
	NODE_SET_METHOD(exports, "setGammaRamp", SetGammaRamp);
	NODE_SET_METHOD(exports, "defaultWindowHints", DefaultWindowHints);
	NODE_SET_METHOD(exports, "windowHint", WindowHint);
	NODE_SET_METHOD(exports, "windowHintString", WindowHintString);
	NODE_SET_METHOD(exports, "createWindow", CreateWindow);
	NODE_SET_METHOD(exports, "destroyWindow", DestroyWindow);
	NODE_SET_METHOD(exports, "windowShouldClose", WindowShouldClose);
	NODE_SET_METHOD(exports, "setWindowShouldClose", SetWindowShouldClose);
	NODE_SET_METHOD(exports, "setWindowTitle", SetWindowTitle);
	NODE_SET_METHOD(exports, "setWindowIcon", SetWindowIcon);
	NODE_SET_METHOD(exports, "getWindowPos", GetWindowPos);
	NODE_SET_METHOD(exports, "setWindowPos", SetWindowPos);
	NODE_SET_METHOD(exports, "getWindowSize", GetWindowSize);
	NODE_SET_METHOD(exports, "setWindowSizeLimits", SetWindowSizeLimits);
	NODE_SET_METHOD(exports, "setWindowAspectRatio", SetWindowAspectRatio);
	NODE_SET_METHOD(exports, "setWindowSize", SetWindowSize);
	NODE_SET_METHOD(exports, "getFramebufferSize", GetFramebufferSize);
	NODE_SET_METHOD(exports, "getWindowFrameSize", GetWindowFrameSize);
	NODE_SET_METHOD(exports, "getWindowContentScale", GetWindowContentScale);
	NODE_SET_METHOD(exports, "getWindowOpacity", GetWindowOpacity);
	NODE_SET_METHOD(exports, "setWindowOpacity", SetWindowOpacity);
	NODE_SET_METHOD(exports, "iconifyWindow", IconifyWindow);
	NODE_SET_METHOD(exports, "restoreWindow", RestoreWindow);
	NODE_SET_METHOD(exports, "maximizeWindow", MaximizeWindow);
	NODE_SET_METHOD(exports, "showWindow", ShowWindow);
	NODE_SET_METHOD(exports, "hideWindow", HideWindow);
	NODE_SET_METHOD(exports, "focusWindow", FocusWindow);
	NODE_SET_METHOD(exports, "requestWindowAttention", RequestWindowAttention);
	NODE_SET_METHOD(exports, "getWindowMonitor", GetWindowMonitor);
	NODE_SET_METHOD(exports, "setWindowMonitor", SetWindowMonitor);
	NODE_SET_METHOD(exports, "getWindowAttrib", GetWindowAttrib);
	NODE_SET_METHOD(exports, "setWindowAttrib", SetWindowAttrib);
	NODE_SET_METHOD(exports, "setWindowUserPointer", SetWindowUserPointer);
	NODE_SET_METHOD(exports, "getWindowUserPointer", GetWindowUserPointer);
	NODE_SET_METHOD(exports, "setWindowPosCallback", SetWindowPosCallback);
	NODE_SET_METHOD(exports, "setWindowSizeCallback", SetWindowSizeCallback);
	NODE_SET_METHOD(exports, "setWindowCloseCallback", SetWindowCloseCallback);
	NODE_SET_METHOD(exports, "setWindowRefreshCallback", SetWindowRefreshCallback);
	NODE_SET_METHOD(exports, "setWindowFocusCallback", SetWindowFocusCallback);
	NODE_SET_METHOD(exports, "setWindowIconifyCallback", SetWindowIconifyCallback);
	NODE_SET_METHOD(exports, "setWindowMaximizeCallback", SetWindowMaximizeCallback);
	NODE_SET_METHOD(exports, "setFramebufferSizeCallback", SetFramebufferSizeCallback);
	NODE_SET_METHOD(exports, "setWindowContentScaleCallback", SetWindowContentScaleCallback);
	NODE_SET_METHOD(exports, "pollEvents", PollEvents);
	NODE_SET_METHOD(exports, "waitEvents", WaitEvents);
	NODE_SET_METHOD(exports, "waitEventsTimeout", WaitEventsTimeout);
	NODE_SET_METHOD(exports, "postEmptyEvent", PostEmptyEvent);
	NODE_SET_METHOD(exports, "getInputMode", GetInputMode);
	NODE_SET_METHOD(exports, "setInputMode", SetInputMode);
	NODE_SET_METHOD(exports, "rawMouseMotionSupported", RawMouseMotionSupported);
	NODE_SET_METHOD(exports, "getKeyName", GetKeyName);
	NODE_SET_METHOD(exports, "getKeyScancode", GetKeyScancode);
	NODE_SET_METHOD(exports, "getKey", GetKey);
	NODE_SET_METHOD(exports, "getMouseButton", GetMouseButton);
	NODE_SET_METHOD(exports, "getCursorPos", GetCursorPos);
	NODE_SET_METHOD(exports, "setCursorPos", SetCursorPos);
	NODE_SET_METHOD(exports, "createCursor", CreateCursor);
	NODE_SET_METHOD(exports, "createStandardCursor", CreateStandardCursor);
	NODE_SET_METHOD(exports, "destroyCursor", DestroyCursor);
	NODE_SET_METHOD(exports, "setCursor", SetCursor);
	NODE_SET_METHOD(exports, "setKeyCallback", SetKeyCallback);
	NODE_SET_METHOD(exports, "setCharCallback", SetCharCallback);
	NODE_SET_METHOD(exports, "setCharModsCallback", SetCharModsCallback);
	NODE_SET_METHOD(exports, "setMouseButtonCallback", SetMouseButtonCallback);
	NODE_SET_METHOD(exports, "setCursorPosCallback", SetCursorPosCallback);
	NODE_SET_METHOD(exports, "setCursorEnterCallback", SetCursorEnterCallback);
	NODE_SET_METHOD(exports, "setScrollCallback", SetScrollCallback);
	NODE_SET_METHOD(exports, "setDropCallback", SetDropCallback);
	NODE_SET_METHOD(exports, "joystickPresent", JoystickPresent);
	NODE_SET_METHOD(exports, "getJoystickAxes", GetJoystickAxes);
	NODE_SET_METHOD(exports, "getJoystickButtons", GetJoystickButtons);
	NODE_SET_METHOD(exports, "getJoystickHats", GetJoystickHats);
	NODE_SET_METHOD(exports, "getJoystickName", GetJoystickName);
	NODE_SET_METHOD(exports, "getJoystickGUID", GetJoystickGUID);
	NODE_SET_METHOD(exports, "setJoystickUserPointer", SetJoystickUserPointer);
	NODE_SET_METHOD(exports, "getJoystickUserPointer", GetJoystickUserPointer);
	NODE_SET_METHOD(exports, "joystickIsGamepad", JoystickIsGamepad);
	NODE_SET_METHOD(exports, "setJoystickCallback", SetJoystickCallback);
	NODE_SET_METHOD(exports, "updateGamepadMappings", UpdateGamepadMappings);
	NODE_SET_METHOD(exports, "getGamepadName", GetGamepadName);
	NODE_SET_METHOD(exports, "getGamepadState", GetGamepadState);
	NODE_SET_METHOD(exports, "setClipboardString", SetClipboardString);
	NODE_SET_METHOD(exports, "getClipboardString", GetClipboardString);
	NODE_SET_METHOD(exports, "getTime", GetTime);
	NODE_SET_METHOD(exports, "setTime", SetTime);
	NODE_SET_METHOD(exports, "getTimerValue", GetTimerValue);
	NODE_SET_METHOD(exports, "getTimerFrequency", GetTimerFrequency);
	NODE_SET_METHOD(exports, "makeContextCurrent", MakeContextCurrent);
	NODE_SET_METHOD(exports, "getCurrentContext", GetCurrentContext);
	NODE_SET_METHOD(exports, "swapBuffers", SwapBuffers);
	NODE_SET_METHOD(exports, "swapInterval", SwapInterval);
	NODE_SET_METHOD(exports, "extensionSupported", ExtensionSupported);
	NODE_SET_METHOD(exports, "getProcAddress", GetProcAddress);
	NODE_SET_METHOD(exports, "vulkanSupported", VulkanSupported);
	NODE_SET_METHOD(exports, "getRequiredInstanceExtensions", GetRequiredInstanceExtensions);
	NODE_SET_METHOD(exports, "getInstanceProcAddress", GetInstanceProcAddress);
	NODE_SET_METHOD(exports, "getPhysicalDevicePresentationSupport", GetPhysicalDevicePresentationSupport);
	NODE_SET_METHOD(exports, "createWindowSurface", CreateWindowSurface);

}
NODE_MODULE(NODE_GYP_MODULE_NAME, ExportModule);